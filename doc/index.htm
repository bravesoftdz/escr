<html><head><title>ESCR Scripting System</title></head>

<body background=backg.jpg>
<center><h1>ESCR Program and Callable System</h1>
13 March 2017
</center>

<!-- *********************************************************************** -->
<br><p><center><h2 id="#index">Index</h2></center>

<ul>
<li><a href="#intro">Introduction</a>
<li><a href="#conventions">Documentation Conventions</a>
<li><a href="#versions">Version History</a>
<li><a href="dtype.htm">Data Types</a>
<li><a href="cmds.htm">Commands</a>
<li><a href="func.htm">Functions</a>
</ul>


<!-- *********************************************************************** -->
<br><p><center><h2 id="intro">Introduction</h2></center><dl>

<p>The ESCR system is a script processing system intended to build
applications on that need to execute scripts as part of their function.
The script system executes interpreted code organized as lines of text.

<p>The scripting system can operate in one of two high-level modes:
<dd><dl>

  <p><dt><h3>Script Mode</h3></dt><dd>

    <p>The source code is purely code executed by the script system.  The
    code is therefore a program, with the script system being the
    interpreter that executes the program.

  <p><dt><h3>Pre-processor Mode</h3></dt><dd>

    <p>The source code is the input to a pre-processor.  The purpose of
    the script logic is to transform the pre-processed code into
    post-processed code.  Special syntax is required to identify script
    commands and other constructs.  When no such special syntax is
    present, the data is simply copied from the input file to the output
    file.

    <p>The special syntaxes for identifying script elements are
    configurable by the application using the script system.  For example,
    a particular pre-processor program may use the rule that script
    commands must start with a slash to distinguish them from text that is
    simply data to be copied from the input file to the output file.

  </dl></dd>

<p>At its core, the ESCR system is a linkable library.  This library
performs the mechanics of executing script elements, and in pre-processor
mode of identifying script elements and copying other data to the output.
The application provides the lines of source code to process, by
referencing files, file snippets, previously stored source lines, or
source lines generated by the application.

<p><dt><h3>Customizations</h3></dt><dd>

  <p>Applications can customize certain aspects of the script system that
  affect the scripting "language" as seen by users.  Applications may be
  documented listing only these customizations, then referring to this
  ESCR script system documentation for the remaining language features.

  <p>Each application should specify how it customizes the script system.
  The possible customzations are:<ol>

    <p><li>Whether the script system is run in script mode or
    pre-processor mode.

    <p><li>Syntax for identifying script comments.  No script
    interpretation is performed within script comments.  In pre-processor
    mode, script comments are not copied to the output file.

    <p><li>In preprocessor mode, syntax for identifying comments in the
    data file. No script interpretation is performed within data file
    comments, and they are copied to the output file.

    <p><li>Syntax for identifying script commands.  This is generally not
    used in script mode since all source code is a sequence of script
    commands.

    <p><li>Additional commands.  The syntax for identifying commands is
    the same for all commands, regardless of whether they are native to
    the script system or added by the application.

    <p><li>The syntax for identifying functions in-line with other code
    (or also in-line with raw data in pre-processor mode).

    <p><li>Additional functions.  The syntax for identifying functions is
    the same for all functions, regardless of whether they are native to
    the script system or added by the application.

    <p><li>Required file name suffixes for include files referenced by the
    native INCLUDE command.

    </ol>

<p><dt><h3>The ESCR Program</h3></dt><dd>

  <p>The ESCR program uses the script system in script mode.  It is a
  stand-alone interpreter exporting the native features of the ESCR script
  system.  Its purpose is to be a script interpreter, and to serve as a
  example of a minimum application using the ESCR script system.

  <p>Most of this ESCR documentation is written as a manual for the ESCR
  program.  However, all the script execution symantics, such as the
  operation of commands, inline functions, and the like, are implemented
  in the callable ESCR system and therefore apply to other applications
  using this system.

  <p>The script system customizations used by the ESCR program, according
  to the list above, are:<ol>

    <p><li>Script mode, not pre-processor mode.

    <p><li>Script comments start with "//".  "//" not within a quoted
    string and all characters following the "//" on a line are a comment.
    Comments end at the end of line.

    <p><li>There are no data file comments.  There is no data since the
    system is not in pre-processor mode.

    <p><li>There is no special syntax for identifying script commands.
    The first keyword on each line is a script command name.

    <p><li>No commands are added to those built into the script system.

    <p><li>Inline functions start with "[" and end with "]".

    <p><li>No functions are added to those built into the script system.

    <p><li>The names of files referenced by the INCLUDE command must end
    in ".escr" or ".es".

    </ol>

</dl>


<!-- *********************************************************************** -->
<br><p><center><h2 id="conventions">Documentation Conventions</h2></center><dl>

<p><dt><h3>Source code</h3></dt><dd>

<p>Verbatim source code is shown in

<p><tt>fixed-space font</tt>

<p>just like you would see it in a source code editor.&nbsp;

<p><dt><h3>Keywords</h3></dt><dd>

<p>ESCR keywords are shown in

<p><b>bold face</b><br>

<p>in descriptive text.  When they appear within larger source code, they
are shown in

<p><tt><b>bold and fixed space</b></tt>

<p>Keywords are case-insensitive.  They may be shown upper case, lower
case, or mixed case in this document.

<p><dt><h3>Description</h3></dt><dd>

<p>Brief descriptions of what to write instead of the actual text to write
are shown in

<p><i>italic type</i>

<p>Such descriptions must be replaced by the item they describe in the
actual source code.&nbsp;


</dl>


<!-- *********************************************************************** -->
<br><p><center><h2 id="versions">Version History</h2></center><dl>

<p><dt><h3>18 Oct 2016</h3></dt><dd>

  <p>Main INDEX.HTM created, only sparsely filled in.  Includes Index,
  Introduction, and Version History sections.  Index is very small,
  Introduction is mostly written, and Version History not written at
  all.  Much left to add.

<p><dt><h3>22 Oct 2016</h3></dt><dd>

  <p>Added Version History so far (not much).  Created DTYPE.HTM,
  CMDS.HTM, and FUNC.HTM files with appropriate linking between them.
  Copied the associated sections from the PREPIC documentation file
  into these files.  Fixed up DTYPE.HTM, and got partway thru
  CMDS.HTM.

<p><dt><h3>3 Mar 2017</h3></dt><dd>

  <p>Some minor rewording, typo fixes, etc.  Added default value to the
  description of each data type.  Added <i>Documentation Conventions</i>
  section.  Updated existing documentation to the stated conventions.

<p><dt><h3>13 Mar 2017</h3></dt><dd>

  <p>Finished up command descriptions, added function descriptions.

</dl>


<!-- *********************************************************************** -->
<br><p><hr>
<ul>
  <li><a href="dtype.htm">Next page</a>
  <li><a href="#index">Master index</a>
  </ul>

</body>
</html>
